{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/Home/Deck.js","Layout/Home/Home.js","Layout/Home/Card.js","Layout/Home/View.js","Layout/Home/NotEnoughCards.js","Layout/Home/CardStudy.js","Layout/Home/Study.js","Layout/Home/DeckForm.js","Layout/Home/CreateDeck.js","Layout/Home/EditDeck.js","Layout/CardForm.js","Layout/Home/AddCard.js","Layout/Home/EditCard.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","append","Deck","history","useHistory","abortController","AbortController","window","confirm","push","abort","length","style","flexShrink","description","to","onClick","Home","decks","setDecks","useEffect","decksData","fetchDecks","deckList","map","index","Card","useRouteMatch","front","back","type","deleteCard","then","go","View","setCards","useState","selectedDeck","setSelectedDeck","useParams","cardList","width","NotEnoughCards","CardStudy","currentIndex","setCurrentIndex","setFront","Study","DeckForm","editDesc","editName","editId","isNew","setName","desc","setDesc","newDeck","upDeck","handleCreateSubmit","event","preventDefault","result","handleEditSubmit","onSubmit","htmlFor","onChange","target","value","placeholder","rows","CreateDeck","EditDeck","setDeck","fetchOneDeck","CardForm","editFront","editBack","setBack","newCard","upCard","log","cols","AddCard","EditCard","setCard","fetchOneCard","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6bf40d8.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:8080\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport { deleteDeck } from \"../../utils/api\"\r\n\r\n\r\n\r\nfunction Deck({ deck }){\r\n  const history = useHistory();\r\n\r\n  async function deleteHandler(){\r\n      const abortController = new AbortController();\r\n      if(\r\n        window.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\")\r\n      ){\r\n        await deleteDeck(deck.id, abortController.signal)\r\n        history.push(\"/\")\r\n      }\r\n      return () => abortController.abort();\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"card mb-5\">\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{deck.name}</h5>\r\n                <h6 className=\"card-subtitle mb-2 text-muted\">{deck.cards.length} cards</h6>\r\n                <p className=\"card-text\" style={{ flexShrink: 1 }}>{deck.description}</p>\r\n                <Link to={`/decks/${deck.id}`} className=\"card-link\"><button className=\"btn btn-secondary\">View</button></Link>\r\n                <Link to={`/decks/${deck.id}/study`} className=\"card-link\"><button className=\"btn btn-primary\">Study</button></Link>\r\n                <button className=\"btn btn-danger ml-5\" onClick={deleteHandler}>Delete</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Deck;\r\n","import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { listDecks } from \"../../utils/api\";\r\nimport Deck from \"./Deck\";\r\n\r\nexport default function Home({ decks, setDecks }) {\r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n\r\n        async function fetchDecks() {\r\n            const decksData = await listDecks(abortController.signal);\r\n            setDecks(decksData);\r\n        }\r\n        fetchDecks();\r\n    }, [setDecks]);\r\n\r\n    const deckList = decks.map((deck, index) => <Deck key={index} deck={deck} />);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"actions\">\r\n                <Link to=\"/decks/new\">\r\n                    <button className=\"btn btn-secondary\">\r\n                        <span className=\"oi oi-plus mr-2\"></span>\r\n                        Create Deck\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n\r\n            <div>{deckList}</div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Link, useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { deleteCard } from \"../../utils/api\";\r\n\r\nexport default function Card({ card }) {\r\n\tconst history = useHistory();\r\n\tconst { url } = useRouteMatch();\r\n\tconst cardId = card.id;\r\n\r\n\tconst deleteHandler = () => {\r\n\t\tconst abortController = new AbortController();\r\n\t\twindow.confirm(\"Delete this card?\\n\\nYou will not be able to recover it.\") ? deleteCard(cardId, abortController.signal).then(history.go(\"0\")) : history.go(\"0\")\r\n\t}\r\n\r\n\treturn (\r\n\t\t<main>\r\n\t\t\t<section className=\"card\">\r\n\t\t\t\t<div className=\"container mb-5\">\r\n\t\t\t\t\t<p className=\"card-text\">{ card.front }</p>\r\n\t\t\t\t\t<p>{ card.back }</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"d-flex mb-3\">\r\n\t\t\t\t\t<Link to={`${url}/cards/${cardId}/edit`}>\r\n\t\t\t\t\t\t<button type=\"button\" className=\"btn btn-secondary mx-3\">Edit</button>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t\t<button type=\"button\" className=\"btn btn-danger\" onClick={deleteHandler}>Delete</button>\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t</main>\r\n\t);\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams, Link, useHistory } from 'react-router-dom';\r\nimport { readDeck, deleteDeck } from '../../utils/api';\r\nimport Card from './Card';\r\n\r\nexport default function View({ cards, setCards }) {\r\n    const [ selectedDeck, setSelectedDeck ] = useState([]);\r\n\r\n    const { deckId } = useParams();\r\n    const history = useHistory();\r\n\r\n    const deleteHandler = () => {\r\n\t\tconst abortController = new AbortController();\r\n\t\twindow.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\") ? deleteDeck(deckId, abortController.signal).then(history.push(\"/\")) : history.go(\"/\")\r\n\t}\r\n\r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n\r\n        async function fetchDecks() {\r\n            const decksData = await readDeck(deckId, abortController.signal);\r\n            setSelectedDeck(decksData);\r\n            setCards(decksData.cards);\r\n        }\r\n        fetchDecks();\r\n        return () => abortController.abort();\r\n    }, [ deckId, setCards ]);\r\n\r\n    const cardList = cards.map((card, index) => (\r\n        <Card card={card} key={index} deckId={deckId} selectedDeck={selectedDeck} />\r\n    ));\r\n\r\n  return (\r\n    <div>\r\n      <div className='container'>\r\n        <nav aria-label='breadcrumb'>\r\n            <ol className='breadcrumb'>\r\n                <li className='breadcrumb-item'>\r\n                    <Link to='/'>Home</Link>\r\n                </li>\r\n                <li className='breadcrumb-item active' aria-current='page'>\r\n                    { selectedDeck.name }\r\n                </li>\r\n            </ol>\r\n        </nav>\r\n        <div className='card border-0' style={{ width: '50rem' }}>\r\n            <div className='card-body'>\r\n                <h4 className='card-title'>{ selectedDeck.name }</h4>\r\n                <p className='card-text'>{selectedDeck.description}</p>\r\n                <Link to={`/decks/${ deckId }/edit`} className='card-link'>\r\n                    <button className='btn btn-secondary'>Edit</button>\r\n                </Link>\r\n                <Link to={`/decks/${ deckId }/study`} className='card-link'>\r\n                    <button className='btn btn-primary'>Study</button>\r\n                </Link>\r\n                <Link to={`/decks/${ deckId }/cards/new`} className='card-link'>\r\n                    <button className='btn btn-primary'>Add Cards</button>\r\n                </Link>\r\n                <button className='btn btn-danger ml-3' onClick={ deleteHandler }>\r\n                    Delete\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <h3>Cards</h3>\r\n\r\n        { cardList }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\n\r\n\r\nexport default function NotEnoughCards({ cards }) {\r\n    const { deckId } = useParams();\r\n\r\n  return (\r\n    <div>\r\n        <div className='row'>\r\n            <div className='col'>\r\n                <h3>Not Enough Cards</h3>\r\n                <p>\r\n                    You need at least 3 cards to study,\r\n                    there are {cards.length} in this\r\n                    deck.\r\n                </p>\r\n            </div>\r\n        </div>\r\n        <div className='row'>\r\n            <div className='col'>\r\n                <Link to={`/decks/${deckId}/cards/new`}>\r\n                    <button type='button' className='btn btn primary'>\r\n                        Add Cards\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport NotEnoughCards from \"./NotEnoughCards\";\r\n\r\nexport default function CardStudy({ selectedDeck }) {\r\n\tconst { cards } = selectedDeck;\r\n\r\n\tconst [currentIndex, setCurrentIndex] = useState(0);\r\n\tconst [front, setFront] = useState(true);\r\n\tconst history = useHistory();\r\n\r\n\tconst flipButtonHandler = () => {\r\n\t\tsetFront(!front);\r\n\t};\r\n\r\n\tconst nextButtonHandler = () => {\r\n\t\tif (currentIndex < cards.length - 1) {\r\n\t\t\tsetCurrentIndex(currentIndex + 1);\r\n\t\t\tsetFront(true);\r\n\t\t} else {\r\n\t\t\tif (\r\n\t\t\t\twindow.confirm(\r\n\t\t\t\t\t\"Restart cards?\\n\\n Click 'Cancel' to return to Home Page\"\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\tsetCurrentIndex(0);\r\n\t\t\t\tsetFront(true);\r\n\t\t\t} else {\r\n\t\t\t\thistory.push(\"/\");\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tif (cards.length <= 2) {\r\n\t\treturn <NotEnoughCards cards={cards} />;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"card\" style={{ width: \"45rem\" }}>\r\n\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t<h5 className=\"card-title\">\r\n\t\t\t\t\t\tCard {currentIndex + 1} of {cards.length}\r\n\t\t\t\t\t</h5>\r\n\t\t\t\t\t<p className=\"card-text\">\r\n\t\t\t\t\t\t{front ? cards[currentIndex].front : cards[currentIndex].back}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t\t\tonClick={flipButtonHandler}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tFlip\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t{!front ? (\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\r\n\t\t\t\t\t\t\tonClick={nextButtonHandler}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tNext\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { readDeck } from '../../utils/api';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport CardStudy from './CardStudy';\r\n\r\nexport default function Study() {\r\n    const [ selectedDeck, setSelectedDeck ] = useState({ cards: [] });\r\n    const { deckId } = useParams();\r\n\r\n    useEffect(() => {\r\n        const abortController = new AbortController()\r\n\r\n        readDeck(deckId, abortController.signal).then(setSelectedDeck)\r\n    }, [deckId]);\r\n\r\n    if (!selectedDeck.id) {\r\n        return <p>Loading...</p>\r\n    } else if (selectedDeck.cards.length < 3) {\r\n        return (\r\n            <div>\r\n                <h2><span>Study</span>:<span>{ selectedDeck.name }</span></h2>\r\n                <p>Not Enough Cards</p>\r\n                <Link to={`/decks/${deckId}/cards/new`}>\r\n                    <button type='button' className='btn btn-primary'>\r\n                        Add Cards\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div>\r\n                <nav aria-label='breadcrumb'>\r\n                    <ol className=\"breadcrumb\">\r\n                        <li className=\"breadcrumb-item\">\r\n                            <Link to={'/'}>Home</Link>\r\n                        </li>\r\n                        <li className='breadcrumb-item'>\r\n                            <Link to={`/decks/${deckId}`}>{ selectedDeck.name }</Link>\r\n                        </li>\r\n                        <li className='breadcrumb-item active' aria-current='page'>\r\n                            Study\r\n                        </li>\r\n                    </ol>\r\n                </nav>\r\n                <h1>Study: {selectedDeck.name}</h1>\r\n                <CardStudy selectedDeck={selectedDeck} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createDeck, updateDeck } from \"../../utils/api\";\r\n\r\nexport default function DeckForm({\r\n\teditDesc = \"\",\r\n\teditName = \"\",\r\n\teditId = \"\",\r\n\tisNew,\r\n}) {\r\n\tconst [name, setName] = useState(\"\");\r\n\tconst [desc, setDesc] = useState(\"\");\r\n\tconst newDeck = { name: name, description: desc };\r\n\tconst upDeck = { name: name, description: desc, id: editId };\r\n\tconst history = useHistory();\r\n\r\n\tconst handleNameChange = (event) => setName(event.target.value);\r\n\tconst handleDescChange = (event) => setDesc(event.target.value);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetName(editName);\r\n\t\tsetDesc(editDesc);\r\n\t}, [editName, editDesc]);\r\n\r\n\tconst handleCreateSubmit = async function (event) {\r\n\t\tevent.preventDefault();\r\n\t\tlet result = await createDeck(newDeck);\r\n\t\tlet deckId = result.id;\r\n\t\thistory.push(`/decks/${deckId}`);\r\n\t};\r\n\r\n\tconst handleEditSubmit = async function (event) {\r\n\t\tevent.preventDefault();\r\n\t\tlet result = await updateDeck(upDeck);\r\n\t\tlet deckId = result.id;\r\n\t\thistory.push(`/decks/${deckId}`);\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<form\r\n\t\t\t\tclassName=\"form-group\"\r\n\t\t\t\tonSubmit={isNew ? handleCreateSubmit : handleEditSubmit}\r\n\t\t\t>\r\n\t\t\t\t<label className=\"col-form-label\" htmlFor=\"deckName\">\r\n\t\t\t\t\tName\r\n\t\t\t\t</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\tid=\"deckName\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\tonChange={handleNameChange}\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tplaceholder=\"Deck Name\"\r\n\t\t\t\t/>\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<label htmlFor=\"deckDescription\">Description</label>\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tid=\"deckDescription\"\r\n\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\tonChange={handleDescChange}\r\n\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\tvalue={desc}\r\n\t\t\t\t\trows=\"3\"\r\n\t\t\t\t\tplaceholder=\"Deck Description\"\r\n\t\t\t\t/>\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"btn btn-secondary\"\r\n\t\t\t\t\tonClick={(event) => {\r\n\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\thistory.go(-1);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tCancel{\" \"}\r\n\t\t\t\t</button>\r\n\t\t\t\t<button className=\"btn btn-primary ml-2\" type=\"submit\">\r\n\t\t\t\t\tSubmit\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport DeckForm from \"./DeckForm\";\r\n\r\nexport default function CreateDeck() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<nav aria-label=\"breadcrumb\">\r\n\t\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t\t<li className=\"breadcrumb-item\">\r\n\t\t\t\t\t\t<Link to=\"/\">Home</Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n\t\t\t\t\t\tCreate Deck\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ol>\r\n\t\t\t</nav>\r\n\r\n\t\t\t<DeckForm isNew={true} />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { readDeck } from \"../../utils/api\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport DeckForm from \"./DeckForm\";\r\n\r\nexport default function EditDeck() {\r\n\tconst { deckId } = useParams();\r\n\tconst [deck, setDeck] = useState({});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst abortController = new AbortController();\r\n\t\tasync function fetchOneDeck() {\r\n\t\t\tconst response = await readDeck(deckId, abortController.signal);\r\n\t\t\tsetDeck(response);\r\n\t\t}\r\n\t\tfetchOneDeck();\r\n\t}, [deckId]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<nav aria-label=\"breadcrumb\">\r\n\t\t\t\t<ol className=\"breadcrumb\">\r\n                    <li className=\"breadcrumb-item\">\r\n                        <Link to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                        Edit Deck\r\n                    </li>\r\n                </ol>\r\n\t\t\t</nav>\r\n\r\n            <DeckForm \r\n                editDesc={deck.description}\r\n                editName={deck.name}\r\n                editId={deckId}\r\n                isNew={false}\r\n            />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { createCard, updateCard } from '../utils/api';\r\n\r\nexport default function CardForm({ editFront = \"\", editBack = \"\", deckId, cardId, isNew }) {\r\n    const [ front, setFront ] = useState(\"\");\r\n    const [ back, setBack ] = useState(\"\");\r\n    const newCard = { front: front, back: back };\r\n    const upCard = {\r\n        front: front,\r\n        back: back,\r\n        id: cardId,\r\n        deckId: Number(deckId),\r\n    };\r\n    const history = useHistory();\r\n    const handleFrontChange = (event) => setFront(event.target.value);\r\n    const handleBackChange = (event) => setBack(event.target.value);\r\n\r\n    useEffect(() => {\r\n        setFront(editFront);\r\n        setBack(editBack);\r\n    }, [editFront, editBack]);\r\n\r\n    const handleCreateSubmit = async function (event) {\r\n        event.preventDefault();\r\n        let result = await createCard(deckId, newCard);\r\n        setFront(\"\");\r\n        setBack(\"\");\r\n        console.log(result);\r\n    };\r\n\r\n    const handleEditSubmit = async function (event) {\r\n        event.preventDefault();\r\n        console.log(upCard);\r\n        let result = await updateCard(upCard);\r\n        console.log(result);\r\n        history.push(`/decks/${deckId}`);\r\n    }\r\n\r\n  return (\r\n    <div className=''>\r\n        <form onSubmit={isNew ? handleCreateSubmit : handleEditSubmit}>\r\n            <div className='row'>\r\n                <label htmlFor='front' className='form-label ml-3'>\r\n                    Front\r\n                    <textarea\r\n                        className='form-control'\r\n                        rows='5'\r\n                        cols='50'\r\n                        id='front'\r\n                        type='text'\r\n                        name='front'\r\n                        onChange={handleFrontChange}\r\n                        value={front}\r\n                        placeholder='Front Side of Card'\r\n                    />\r\n                </label>\r\n            </div>\r\n\r\n            <label htmlFor='back' className='form-label'>\r\n                Back\r\n                <textarea\r\n                    className='form-control'\r\n                    rows='5'\r\n                    cols='50'\r\n                    id='back'\r\n                    type='text'\r\n                    name='back'\r\n                    onChange={handleBackChange}\r\n                    value={back}\r\n                    placeholder='Back Side of Card'\r\n                />\r\n            </label>\r\n            <div className='row'>\r\n                <button\r\n                    type='button'\r\n                    className='btn btn-secondary ml-3'\r\n                    onClick={(event) => {\r\n                        event.preventDefault();\r\n\r\n                        history.go(-1);\r\n                    }}\r\n                >\r\n                    {isNew ? \"Done\" : \"Cancel\"}\r\n                </button>\r\n                <button type=\"submit\" className=\"btn btn-primary ml-2\">\r\n                    {isNew ? \"Submit\" : \"Save\"}\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport CardForm from \"../CardForm\";\r\nimport { readDeck } from \"../../utils/api\";\r\n\r\nexport default function AddCard() {\r\n\tconst { deckId } = useParams();\r\n\tconst [deck, setDeck] = useState({});\r\n\r\n\tuseEffect(() => {\r\n\t\tconst abortController = new AbortController();\r\n\t\tasync function fetchOneDeck() {\r\n\t\t\tconst response = await readDeck(deckId, abortController.signal);\r\n\t\t\tsetDeck(response);\r\n\t\t}\r\n\t\tfetchOneDeck();\r\n\t}, [deckId]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"row col\">\r\n\t\t\t\t<nav aria-label=\"breadcrumb\">\r\n\t\t\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t\t\t<li className=\"breadcrumb-item\">\r\n\t\t\t\t\t\t\t<Link to=\"/\">Home</Link>\r\n\t\t\t\t\t\t</li>\r\n                        <li className=\"breadcrumb-item\">\r\n                            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n                        </li>\r\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                            Add Card\r\n                        </li>\r\n\t\t\t\t\t</ol>\r\n\t\t\t\t</nav>\r\n\t\t\t</div>\r\n            <h2>{deck.name}: Add Card</h2>\r\n            <CardForm deckId={deckId} isNew={true} />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { readCard, readDeck } from '../../utils/api';\r\nimport CardForm from '../CardForm';\r\n\r\nexport default function EditCard() {\r\n    const { deckId, cardId } = useParams();\r\n    const [ deck, setDeck ] = useState([]);\r\n    const [ card, setCard ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n        async function fetchOneDeck() {\r\n            const response = await readDeck(deckId, abortController.signal);\r\n            setDeck(response);\r\n        }\r\n        fetchOneDeck();\r\n    }, [deckId]);\r\n\r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n        async function fetchOneCard() {\r\n            const response = await readCard(cardId, abortController.signal);\r\n            setCard(response);\r\n        }\r\n        fetchOneCard();\r\n    }, [cardId]);\r\n\r\n    return (\r\n        <div>\r\n            <div className='row col'>\r\n                <nav aria-label='breadcrumb'>\r\n                    <ol className='breadcrumb'>\r\n                        <li className='breadcrumb-item'>\r\n                            <Link to='/'>Home</Link>\r\n                        </li>\r\n                        <li className='breadcrumb-item'>\r\n                            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n                        </li>\r\n                        <li className='breadcrumb-item active' aria-current='page'>\r\n                            Edit Card {cardId}\r\n                        </li>\r\n                    </ol>\r\n                </nav>\r\n            </div>\r\n            <h2>Edit Card</h2>\r\n            <CardForm \r\n                deckId={deckId}\r\n                editFront={card.front}\r\n                editBack={card.back}\r\n                cardId={cardId}\r\n                isNew={false}\r\n            />\r\n        </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./Home/Home\";\nimport View from \"./Home/View\";\nimport Study from \"./Home/Study\";\nimport CreateDeck from \"./Home/CreateDeck\";\nimport EditDeck from \"./Home/EditDeck\";\nimport AddCard from \"./Home/AddCard\";\nimport EditCard from \"./Home/EditCard\";\n\nfunction Layout() {\n  const [ decks, setDecks ] = useState([]);\n  const [ cards, setCards ] = useState([]);\n\n\n\n\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/decks/new\">\n            <CreateDeck />\n          </Route>\n          <Route exact path=\"/decks/:deckId\">\n            <View\n              cards={cards}\n              setCards={setCards} />\n          </Route>\n          <Route exact path=\"/decks/:deckId/edit\">\n            <EditDeck />\n          </Route>\n          <Route exact path=\"/decks/:deckId/study\">\n            <Study\n              cards={cards}\n              setCards={setCards} />\n          </Route>\n          <Route path=\"/decks/:deckId/cards/new\">\n            <AddCard />\n          </Route>\n\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <EditCard />\n          </Route>\n          <Route exact path=\"/\">\n            <Home \n              decks={decks}\n              setDecks={setDecks} />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}